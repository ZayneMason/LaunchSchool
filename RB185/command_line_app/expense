#! /usr/bin/env ruby
require "pg"
require "io/console"

# An expense recording system

# Commands:

# add AMOUNT MEMO [DATE] - record a new expense
# clear - delete all expenses
# list - list all expenses
# delete NUMBER - remove expense with id NUMBER
# search QUERY - list expenses with a matching memo field

# ExpenseData Class that interacts with database based on CLI class directions
class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    if result.values.empty?
      abort "#{display_count(result)}"
    end

    display_count(result)
    output_result(result)
  end

  def add_expsense(amount, memo)
    unless amount && memo
      abort 'You must provide an amount and memo.'
    end

    date = Date.today
    sql = "INSERT INTO expenses(amount, memo, created_on) VALUES($1, $2, $3);"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search(search_term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE($1);"
    result = @connection.exec(sql, [search_term])

    if result.values.empty?
      abort "No results found based on search."
    end
    display_count(result)
    output_result(result)
  end

  def delete(id)
    ids = @connection.exec("SELECT * FROM expenses;").field_values("id")
    unless ids.include?(id)
      abort "Specified expense id does not exist."
    end

    sql = "SELECT * FROM expenses WHERE id = $1;"
    result = @connection.exec_params(sql, [id])
    puts "The following expense is now deleted:"
    output_result(result)

    sql = "DELETE FROM expenses WHERE id = $1"
    @connection.exec_params(sql, [id])
  end

  def clear
    @connection.exec("DELETE FROM expenses;")
  end

  private

  
  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL
        );
      SQL
    end
  end

  def output_result(result)
    result.each do |tuple|
      columns = [
        tuple["id"].rjust(3),
        tuple["amount"].rjust(7),
        tuple["created_on"].rjust(10),
        tuple["memo"]
      ]
      puts columns.join(' | ')
    end

    puts "-" * 50

    amount_sum = result.field_values("amount").map(&:to_f).inject(:+)

    puts "Total #{amount_sum.to_s.rjust(25)}"
  end

  def display_count(result)
    count = result.ntuples
    if count == 0
      puts "There are no expenses."
    elsif count == 1
      puts "There is #{count} expense."
    else
      puts "There are #{count} expenses."
    end
  end

end

# CLI Class designed to parse and handle CLI commands
class CLI
  def initialize
    @data = ExpenseData.new
  end

  def run(arguments)
    command = arguments.first
    case command
    when "list"
      @data.list_expenses
    when "add"
      @data.add_expsense(arguments[1], arguments[2])
    when "search"
      @data.search(arguments[1])
    when "delete"
      @data.delete(arguments[1])
    when "clear"
      puts "You will remove all expenses. Are you sure? (y/n)"
      unless $stdin.getch != 'y'
        @data.clear
      end
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
